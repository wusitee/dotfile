#+title: Config

* Information
My personal information.
#+begin_src emacs-lisp
(setq user-full-name "wusitee"
      user-mail-address "kekdkkwk@outlook.com")
#+end_src
* Client
** Workspace
Prevent client from creating new workspace.
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src
** font
#+begin_src emacs-lisp
(setq use-default-font-for-symbols nil)
(setq doom-font (font-spec :family "MapleMono NF" :size 32 ))
(add-hook! 'after-setting-font-hook
  (set-fontset-font t 'latin (font-spec :family "Roboto Mono"))
  (set-fontset-font t 'symbol (font-spec :family "Symbola"))
  (set-fontset-font t 'mathematical (font-spec :family "Symbola"))
  (set-fontset-font t 'emoji (font-spec :family "Symbola")))
#+end_src
** Transparency
Make client transparent.
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 90)
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src
** Line number
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-horizon)
#+end_src
* Terminal
Using fish for v-term.
#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
(setq vterm-timer-delay 0) ;; make vterm smoother
#+end_src
* Tools
** Spelling check
Set the spelling check to en-US
#+begin_src emacs-lisp
(after! langtool
  (setq langtool-default-language "en-US"))
#+end_src
** gptel
#+begin_src emacs-lisp
(use-package! gptel)
;; vveai offers an instant OpenAI compatible API
(setq gptel-model 'gpt-4o
      gptel-backend
      (gptel-make-openai "vveai"
        :protocol "https"
        :host "api.vveai.com"
        :endpoint "/v1/chat/completions"
        :stream t                      ;optionally nil as Cerebras is instant AI
        :key "***REMOVED***";can be a function that returns the key
        :models '(claude-3-7-sonnet-20250219
                  gpt-4o
                  gpt-4.1
                  o3-mini
                  claude-3-7-sonnet-20250219-thinking
                  ))
      gptel-default-mode 'org-mode
      gptel-track-media t)
(add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
(add-hook 'gptel-post-response-functions 'gptel-end-of-response)
#+end_src

** lsp
Follow the [[https://emacs-lsp.github.io/lsp-mode/page/performance/][Performance page]]:
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
** Direnv
Enable nix support for certain directories.
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'envrc-global-mode)
#+end_src

** Snippets
*** snippet dir
Set the snippet dirs.
#+begin_src emacs-lisp :tangle no
(setq yas-snippet-dirs '("~/.config/doom/snippets/"))
#+end_src
*** tab conflict
Resolve the tab conflict.
#+begin_src emacs-lisp :tangle no
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
(add-hook 'org-mode-hook
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas-next-field)))
#+end_src
* Completion
** Vertico
Add Chinese pinyin search support to Vertico.
#+begin_src emacs-lisp
(defun pyin-orderless-regexp (orig-func component)
  (let ((result (funcall orig-func component)))
    (pyim-cregexp-build result)))

(advice-add 'orderless-regexp :around #'pyin-orderless-regexp)
#+end_src

** Copilot
Use copilot when needed.
#+begin_src emacs-lisp
(use-package! copilot
  ;; :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* lang
** Org
*** Latex preview
\(Latex\)
#+begin_src emacs-lisp
(use-package! org-latex-preview
  :config
  ;; Increase preview width
  (plist-put! org-latex-preview-appearance-options
             :page-width 0.8
             :scale 2.0)
  ;; Use dvisvgm to generate previews
  ;; You don't need this, it's the default:
  (setq org-latex-preview-process-default 'dvisvgm)

  ;; Turn on auto-mode, it's built into Org and much faster/more featured than
  ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)

  ;; Block C-n, C-p etc from opening up previews when using auto-mode
  ;; (setq org-latex-preview-auto-ignored-commands
  ;;       '(next-line previous-line mwheel-scroll
  ;;         scroll-up-command scroll-down-command))

  ;; Enable consistent equation numbering
  (setq org-latex-preview-numbered t)

  ;; Bonus: Turn on live previews.  This shows you a live preview of a LaTeX
  ;; fragment and updates the preview in real-time as you edit it.
  ;; To preview only environments, set it to '(block edit-special) instead
  (setq org-latex-preview-live t)
  ;; Preivew latex when open a file
  (setq org-startup-with-latex-preview t))

  ;; More immediate live-previews -- the default delay is 1 second
  ;; (setq org-latex-preview-live-debounce 0.25))
(defun org-latex-preview-check-health (&optional inter)
  "Inspect the relevent system state and setup.
INTER signals whether the function has been called interactively."
  (interactive (list t))
  ;; Collect information
  (let* ((diag `(:interactive ,inter)))
    (plist-put diag :org-version org-version)
    ;; modified variables
    (plist-put diag :modified
               (let ((list))
                 (mapatoms
                  (lambda (v)
                    (and (boundp v)
                         (string-match "\\`\\(org-latex-\\|org-persist-\\)" (symbol-name v))
                         (or (and (symbol-value v)
                                  (string-match "\\(-hook\\|-function\\)\\'" (symbol-name v)))
                             (and
                              (get v 'custom-type) (get v 'standard-value)
                              (not (equal (symbol-value v)
                                          (eval (car (get v 'standard-value)) t)))))
                         (push (cons v (symbol-value v)) list))))
                 list))
    ;; Executables
    ;; latex processors
    (dolist (processor org-latex-compilers)
      (when-let ((path (executable-find processor)))
        (let ((version (with-temp-buffer
                         (thread-last
                           (concat processor " --version")
                           (shell-command-to-string)
                           (insert))
                         (goto-char (point-min))
                         (buffer-substring (point) (line-end-position)))))
          (push (list processor version path) (plist-get diag :latex-processors)))))
    ;; Image converters
    (dolist (converter '("dvipng" "dvisvgm" "convert"))
      (when-let ((path (executable-find converter)))
        (let ((version (with-temp-buffer
                         (thread-last
                           (concat converter " --version")
                           (shell-command-to-string)
                           (insert))
                         (goto-char (point-min))
                         (buffer-substring (point) (line-end-position)))))
          (push (list converter version path) (plist-get diag :image-converters)))))
    (when inter
      (with-current-buffer (get-buffer-create "*Org LaTeX Preview Report*")
        (let ((inhibit-read-only t))
          (erase-buffer)

          (insert (propertize "Your LaTeX preview process" 'face 'outline-1))
          (insert "\n\n")

          (let* ((latex-available (cl-member org-latex-compiler
                                             (plist-get diag :latex-processors)
                                             :key #'car :test #'string=))
                 (precompile-available
                  (and latex-available
                       (not (member org-latex-compiler '("lualatex" "xelatex")))))
                 (proc-info (alist-get
                             org-latex-preview-process-default
                             org-latex-preview-process-alist))
                 (image-converter (cadr (plist-get proc-info :programs)))
                 (image-converter
                  (cl-find-if
                   (lambda (c)
                     (string= image-converter c))
                   (plist-get diag :image-converters)
                   :key #'car))
                 (image-output-type (plist-get proc-info :image-output-type)))
            (if org-latex-preview-process-precompiled
                (insert "Precompile with "
                        (propertize (map-elt org-latex-precompile-compiler-map
                                             org-latex-compiler)
                                    'face
                                    (list
                                     (if precompile-available
                                         '(:inherit success :box t)
                                       '(:inherit error :box t))
                                     'org-block))
                        " → "))
            (insert "LaTeX Compile with "
                    (propertize org-latex-compiler 'face
                                (list
                                 (if latex-available
                                     '(:inherit success :box t)
                                   '(:inherit error :box t))
                                 'org-block))
                    " → ")
            (insert "Convert to "
                    (propertize (upcase image-output-type) 'face '(:weight bold))
                    " with "
                    (propertize (car image-converter) 'face
                                (list
                                 (if image-converter
                                     '(:inherit success :box t)
                                   '(:inherit error :box t))
                                 'org-block))
                    "\n\n")
            (insert (propertize org-latex-compiler 'face 'outline-3)
                    "\n"
                    (if latex-available
                        (concat
                          (propertize
                           (mapconcat #'identity (map-nested-elt diag `(:latex-processors ,org-latex-compiler))
                                      "\n")
                           'face 'org-block)
                          "\n"
                          (when (and latex-available (not precompile-available))
                            (propertize
                             (format "\nWarning: Precompilation not available with %S!\n" org-latex-compiler)
                             'face 'warning)))
                      (propertize "Not found in path!\n" 'face 'error))
                    "\n")

            (insert (propertize (cadr (plist-get proc-info :programs)) 'face 'outline-3)
                    "\n"
                    (if image-converter
                        (propertize
                         (concat
                          (mapconcat #'identity (cdr image-converter) "\n")
                          "\n")
                         'face 'org-block)
                      (propertize "Not found in path!\n" 'face 'error))
                    "\n")
            ;; dvisvgm version check
            (when (equal (car-safe image-converter)
                         "dvisvgm")
              (let* ((version-string (cadr image-converter))
                     (dvisvgm-ver (progn
                                    (string-match "\\([0-9.]+\\)" version-string)
                                    (match-string 1 version-string))))

                (when (version< dvisvgm-ver "3.0")
                  (insert (propertize
                           (format "Warning: dvisvgm version %s < 3.0, displaymath will not be centered."
                                   dvisvgm-ver)
                           'face 'warning)
                          "\n\n"))
                (unless (string-match-p " RSVG" system-configuration-features)
                  (insert (propertize
                           "Error: Emacs was not compiled with SVG support,
images cannot be displayed with dvisvgm"
                           'face 'error)))))
            ;; png support check
            (when (member (car-safe image-converter)
                          '("dvipng" "convert"))
              (unless (string-match-p " PNG" system-configuration-features)
                (insert (propertize
                         (format "Error: Emacs was not compiled with PNG support,
images cannot be displayed with %s"
                                 (car-safe image-converter))))))
            (when (not (and latex-available image-converter))
              (insert "path: " (getenv "PATH") "\n\n")))
          ;; Settings
          (insert (propertize "LaTeX preview options" 'face 'outline-2)
                  "\n")

          (pcase-dolist (`(,var . ,msg)
                         `((,org-latex-preview-process-precompiled . "Precompilation           ")
                           (,org-latex-preview-numbered . "Equation renumbering     ")
                           (,org-latex-preview-cache  . "Caching with org-persist ")))
            (insert (propertize "• " 'face 'org-list-dt)
                    msg
                    (if var
                        (propertize "ON" 'face '(success bold org-block))
                      (propertize "OFF" 'face '(error bold org-block)))
                    "\n"))
          (insert "\n"
                  (propertize "LaTeX preview sizing" 'face 'outline-2) "\n"
                  (propertize "•" 'face 'org-list-dt)
                  " Page width  "
                  (propertize
                   (format "%S" (plist-get org-latex-preview-appearance-options :page-width))
                   'face '(org-code org-block))
                  "   (display equation width in LaTeX)\n"
                  (propertize "•" 'face 'org-list-dt)
                  " Scale       "
                  (propertize
                   (format "%.2f" (plist-get org-latex-preview-appearance-options :scale))
                   'face '(org-code org-block))
                  "  (PNG pixel density multiplier)\n"
                  (propertize "•" 'face 'org-list-dt)
                  " Zoom        "
                  (propertize
                   (format "%.2f" (plist-get org-latex-preview-appearance-options :zoom))
                   'face '(org-code org-block))
                  "  (display scaling factor)\n\n")
          (insert (propertize "LaTeX preview preamble" 'face 'outline-2) "\n")
          (let ((major-mode 'org-mode))
            (let ((point-1 (point)))
              (insert org-latex-preview-preamble "\n")
              (org-src-font-lock-fontify-block 'latex point-1 (point))
              (add-face-text-property point-1 (point) '(:inherit org-block :height 0.9)))
            (insert "\n")
            ;; Diagnostic output
            (insert (propertize "Diagnostic info (copied)" 'face 'outline-2)
                    "\n\n")
            (let ((point-1 (point)))
              (pp diag (current-buffer))
              (org-src-font-lock-fontify-block 'emacs-lisp point-1 (point))
              (add-face-text-property point-1 (point) '(:height 0.9))))
          (gui-select-text (prin1-to-string diag))
          (special-mode))
        (setq-local
         revert-buffer-function
         (lambda (&rest _)
           (call-interactively #'org-latex-preview-check-health)
           (message "Refreshed LaTeX preview diagnostic")))
        (let ((message-log-max nil))
          (toggle-truncate-lines 1))
        (goto-char (point-min))
        (display-buffer (current-buffer))))
    diag))
#+end_src
#+begin_src elisp
(add-hook! 'org-mode (yas-activate-extra-mode 'latex-mode))
#+end_src
*** Org Roam UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
*** Capture Templates
Setup Org Roam capture templates.
#+begin_src emacs-lisp
(defun org-roam-template-select-tags ()
  "Prompt and add tags for Org Roam captures"
  (let ((tags (completing-read-multiple "Tag: " (org-roam-tag-completions))))
    (if tags
        (concat "#+filetags: " (org-make-tag-string tags))
      "")))

(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "Default" plain "%?"
           :target (file+head "${slug}.org" "#+title: ${title}\n%(org-roam-template-select-tags)\n")
           :unnarrowed t
           :empty-lines 1)
          ("a" "Anki Card" plain "* ${title}\n%?"
           :target (file+head "${slug}.org" ":PROPERTIES:\n:ANKI_DECK: \n:END:\n#+title: ${title}\n%(org-roam-template-select-tags)\n")
           :unnarrowed t
           :empty-lines 1))))
#+end_src 
*** Anki editor
#+begin_src emacs-lisp
(use-package! anki-editor
  :after org
  :hook (org-mode . (lambda ()
                      (if (ignore-errors (anki-editor-api-check))
                          (anki-editor-mode))))
  :config
  (map! :map anki-editor-mode-map
        :leader
        :prefix ("n e" . "Anki Editor")
        :desc "Anki editor mode" "e" #'anki-editor-mode
        :desc "Insert note" "i" #'anki-editor-insert-note
        :desc "Push notes" "p" #'anki-editor-push-notes
        :desc "Cloze note" "c" #'anki-editor-cloze-dwim
        :desc "Delete current note" "d" #'anki-editor-delete-note-at-point
        :desc "Browse current note" "b" #'anki-editor-gui-browse
        :desc "Set current note type" "t" #'anki-editor-set-note-type
        :desc "Push new notes" "P" #'anki-editor-push-new-notes)
  (setq org-export-with-broken-links t))
#+end_src
*** Org Modern
Make org file beautiful.
#+begin_src emacs-lisp :tangle no
(use-package! org
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  :config
  (setq org-modern-table nil))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-modern-table nil)
#+end_src
*** org directory
#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src
*** org habit
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-modules 'org-habit)
#+end_src
*** Line number
Disable line number
#+begin_src emacs-lisp
(setq-hook! org-mode display-line-numbers nil)
#+end_src
*** Table Alignment
Use Valign to align table.
| 中文    | 对齐         |
|--------+-------------|
| bush   | 对不齐       |
| 测试    | 好不好       |
| 比较好  | 有点卡       |
| 现在好了 | 这边有点卡    |
| 越大越卡 | 但是不长就不卡 |
| 文言文  | 感觉还可以    |
#+begin_src emacs-lisp
(add-hook! org-mode
           (valign-mode)
           (setq valign-fancy-bar 1))
#+end_src
** Latex
*** Latex viewer
Set default latex viewer to Okular.
#+begin_src emacs-lisp
(setq +latex-viewers '(okular))
#+end_src
